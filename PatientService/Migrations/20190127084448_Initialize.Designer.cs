// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientService.Repositories;

namespace PatientService.Migrations
{
    [DbContext(typeof(PatientsServiceContext))]
    [Migration("20190127084448_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PatientService.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("GDPRAcceptedId");

                    b.Property<int>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int?>("ParentFolderId");

                    b.Property<string>("SocialInsuranceNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("StudyAccepted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PatientService.Models.PatientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Country");

                    b.Property<string>("Street");

                    b.Property<string>("Town");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("PatientAddress");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.PatientFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("PatientFolders");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.SubLevelDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("IdInOtherService");

                    b.HasKey("Id");

                    b.ToTable("SubDocuments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SubLevelDocument");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.TopLevelDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("IdOfOtherService");

                    b.HasKey("Id");

                    b.ToTable("TopDocuments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TopLevelDocument");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.TopLevelFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentFolderId");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("TopLevelFolders");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.FolderDocumentSubDocument", b =>
                {
                    b.HasBaseType("PatientServiceModels.NewApproach.SubLevelDocument");

                    b.Property<int?>("ParentId");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("FolderDocumentSubDocument");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.PatientDocumentSubDocument", b =>
                {
                    b.HasBaseType("PatientServiceModels.NewApproach.SubLevelDocument");

                    b.Property<int?>("ParentId")
                        .HasColumnName("PatientDocumentSubDocument_ParentId");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("PatientDocumentSubDocument");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.PatientFolderDocumentSubDocument", b =>
                {
                    b.HasBaseType("PatientServiceModels.NewApproach.SubLevelDocument");

                    b.Property<int?>("ParentId")
                        .HasColumnName("PatientFolderDocumentSubDocument_ParentId");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("PatientFolderDocumentSubDocument");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.PatientFolderDocument", b =>
                {
                    b.HasBaseType("PatientServiceModels.NewApproach.TopLevelDocument");

                    b.Property<int?>("ParentId");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("PatientFolderDocument");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.PatientTopDocument", b =>
                {
                    b.HasBaseType("PatientServiceModels.NewApproach.TopLevelDocument");

                    b.Property<int?>("ParentId")
                        .HasColumnName("PatientTopDocument_ParentId");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("PatientTopDocument");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.TopFolderDocument", b =>
                {
                    b.HasBaseType("PatientServiceModels.NewApproach.TopLevelDocument");

                    b.Property<int?>("ParentId")
                        .HasColumnName("TopFolderDocument_ParentId");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("TopFolderDocument");
                });

            modelBuilder.Entity("PatientService.Models.Patient", b =>
                {
                    b.HasOne("PatientService.Models.PatientAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PatientServiceModels.NewApproach.TopLevelFolder", "ParentFolder")
                        .WithMany("Patients")
                        .HasForeignKey("ParentFolderId");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.PatientFolder", b =>
                {
                    b.HasOne("PatientService.Models.Patient", "Parent")
                        .WithMany("PatientFolders")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.TopLevelFolder", b =>
                {
                    b.HasOne("PatientServiceModels.NewApproach.TopLevelFolder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.FolderDocumentSubDocument", b =>
                {
                    b.HasOne("PatientServiceModels.NewApproach.TopFolderDocument", "Parent")
                        .WithMany("SubDocuments")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.PatientDocumentSubDocument", b =>
                {
                    b.HasOne("PatientServiceModels.NewApproach.PatientTopDocument", "Parent")
                        .WithMany("SubDocuments")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.PatientFolderDocumentSubDocument", b =>
                {
                    b.HasOne("PatientServiceModels.NewApproach.PatientFolderDocument", "Parent")
                        .WithMany("SubDocuments")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.PatientFolderDocument", b =>
                {
                    b.HasOne("PatientServiceModels.NewApproach.PatientFolder", "Parent")
                        .WithMany("SubDocuments")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.PatientTopDocument", b =>
                {
                    b.HasOne("PatientService.Models.Patient", "Parent")
                        .WithMany("PatientDocuments")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PatientServiceModels.NewApproach.TopFolderDocument", b =>
                {
                    b.HasOne("PatientServiceModels.NewApproach.TopLevelFolder", "Parent")
                        .WithMany("SubDocuments")
                        .HasForeignKey("ParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
